# Next.js 開発ルール

## ロール定義

あなたは優秀なエンジニア兼 UI/UX デザイナーとして対応してください。

## 技術スタック

- ランタイム
  - Bun
- フロントエンド
  - Next.js (App Router)
  - TypeScript
  - Zustand
  - TanStack Query
- バックエンド
  - Hono（API）
  - Drizzle ORM
- データベース
  - Cloudflare D1
- ホスティング
  - Cloudflare Workers
- バリデーション
  - Zod
- ユニットテスト
  - Bun test
- フォーマッター/リンター
  - Biome
- UI フレームワーク
  - shadcn/ui (Tailwind CSS)
- 開発手法
  - ドメイン駆動設計（DDD）
  - テスト駆動開発（TDD）

## 期待する回答

- 実装コードは省略せず、完全な形で提供
- TypeScript の型定義も含める
- セキュリティのベストプラクティスに従った実装
- レスポンシブデザインを考慮した UI/UX 提案
- Drizzle スキーマとマイグレーション方法も必要に応じて提示
- 日本語での詳細な説明

## 開発環境設定

### .vscode ディレクトリ

プロジェクトには以下の .vscode 設定ファイルを含めます。これにより、チーム全体で一貫した開発環境を確保します。

#### settings.json

```json
{
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.organizeImports.biome": true,
    "source.fixAll.biome": true
  },
  "editor.defaultFormatter": "biomejs.biome",
  "typescript.tsdk": "node_modules/typescript/lib",
  "typescript.enablePromptUseWorkspaceTsdk": true,
  "css.lint.unknownAtRules": "ignore",
  "tailwindCSS.experimental.classRegex": [
    ["cva\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"],
    ["cn\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"]
  ]
}
```

#### extensions.json

```json
{
  "recommendations": [
    "biomejs.biome",
    "bradlc.vscode-tailwindcss",
    "ms-vscode.vscode-typescript-next",
    "aaron-bond.better-comments",
    "dbaeumer.vscode-eslint",
    "mskelton.workspace-formatter",
    "pustelto.bracketeer",
    "naumovs.color-highlight",
    "paulmolluzzo.convert-css-in-js",
    "streetsidesoftware.code-spell-checker"
  ]
}
```

#### launch.json

```json
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Next.js: debug server-side",
      "type": "node-terminal",
      "request": "launch",
      "command": "bun run dev"
    },
    {
      "name": "Next.js: debug client-side",
      "type": "chrome",
      "request": "launch",
      "url": "http://localhost:3000"
    },
    {
      "name": "Next.js: debug full stack",
      "type": "node-terminal",
      "request": "launch",
      "command": "bun run dev",
      "serverReadyAction": {
        "pattern": "- Local:.+(https?://.+)",
        "uriFormat": "%s",
        "action": "debugWithChrome"
      }
    }
  ]
}

## AI駆動ルール

プロジェクトルートに `biome.json` ファイルを配置し、チーム全体で一貫したコーディングスタイルとルールを確保します。

```json
{
  "$schema": "https://biomejs.dev/schemas/1.5.3/schema.json",
  "organizeImports": {
    "enabled": true
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": true,
      "correctness": {
        "noUnusedVariables": "error",
        "useExhaustiveDependencies": "error"
      },
      "suspicious": {
        "noExplicitAny": "error",
        "noConsoleLog": "warn"
      },
      "style": {
        "useConst": "error",
        "useImportType": "error",
        "useTemplate": "error"
      },
      "a11y": {
        "useButtonType": "error",
        "useAltText": "error"
      }
    },
    "ignore": [
      "node_modules",
      ".next",
      "dist",
      "public"
    ]
  },
  "formatter": {
    "enabled": true,
    "indentStyle": "space",
    "indentWidth": 2,
    "lineWidth": 100,
    "ignore": [
      "node_modules",
      ".next",
      "dist",
      "public",
      "*.md"
    ]
  },
  "javascript": {
    "parser": {
      "unsafeParameterDecoratorsEnabled": true
    },
    "formatter": {
      "quoteStyle": "single",
      "trailingComma": "es5",
      "semicolons": "always"
    }
  }
}

### 1. 実装ドキュメント作成
- 指示を受けた実装が完了したら、コンテキスト理解のために実装内容をまとめたmarkdownドキュメントを作成し、プロジェクトに追加する
- ドキュメントは `/docs/implementations/` ディレクトリに配置し、ファイル名は `[機能名]-implementation.md` の形式にする
- ドキュメントには以下の内容を含める：
  - 機能の目的と背景
  - アーキテクチャと設計パターン
  - 主要コンポーネントとその関係
  - 使用方法と例
  - 注意点とエッジケース
  - 将来的な拡張性

### 2. コード生成ワークフロー
- AIにコード生成を依頼する際は、明確な要件と制約を提示する
- 生成されたコードは必ずレビューし、ドメインモデルに適合することを確認する
- AIが生成したコードにはコメントで「AI生成コード」と明記し、後からの追跡を可能にする

### 3. チームでの知識共有
- AIとの対話履歴をチーム内で共有し、同様の問題に対する解決策を蓄積する
- 重要な設計判断や実装方針は、AIに説明してもらいドキュメント化する
- 月次で、AIの活用パターンと効果をチームで振り返り、改善点を特定する

### 4. 品質管理プロセス
- AIが生成したコードに対して、通常の開発プロセスと同等の品質基準を適用する
- テストカバレッジ、パフォーマンス基準、セキュリティチェックを徹底する
- AIの提案する実装が標準から逸脱する場合は、その理由を文書化する

# セキュリティ

## 機密ファイル

以下のファイルの読み取りと変更を禁止：

- .env ファイル
- .env.local ファイル
- APIキー、トークン、認証情報を含むすべてのファイル

## セキュリティ対策

- 機密ファイルを絶対にコミットしない
- シークレット情報は環境変数を使用する
- ログや出力に認証情報を含めない
- Hono API では適切な認証と認可を実装する
- Cloudflare Workers の環境変数を適切に使用する

## コーディング規約

- Biome の標準的なルールに準拠
- React Hooks の規則に従う
- 関数やコンポーネントには適切なコメントを含める
- Zod によるスキーマ検証を活用する
- `any` と `unknown` 型の使用を禁止する
  - 代わりに具体的な型または型ユーティリティを使用（例：`Record<string, string>`, `Partial<T>`, `Pick<T, K>`）
  - やむを得ない場合は明示的なコメントを添えて `unknown` のみ使用可能とし、必ず型ガードを実施

## ドメイン駆動設計の規約

### 1. レイヤー構造

- ドメイン層
  - エンティティ
  - 値オブジェクト
  - ドメインサービス
  - リポジトリインターフェース
- アプリケーション層
  - ユースケース
  - コマンド/クエリハンドラ
- インフラストラクチャ層
  - リポジトリ実装
  - 外部サービスアダプター
- インターフェース層
  - API コントローラー
  - UI コンポーネント

### 2. ドメイン層の実装

- エンティティと値オブジェクトは不変性を保つ
- ビジネスルールはドメイン層に集約する
- 集約ルートを通じてのみエンティティにアクセス
- ドメインイベントを使用して副作用を分離

### 3. リポジトリパターン

- リポジトリインターフェースはドメイン層で定義
- 実装はインフラストラクチャ層で行う
- D1 と Drizzle を使用したリポジトリ実装

## コンポーネント設計と実装の規約

### 1. ディレクトリ構造とファイル配置

- アプリケーションの構造は App Router 形式（/app ディレクトリ）に準拠
- コンポーネントは /components ディレクトリに配置
  - UI コンポーネントは /components/ui に配置
  - 機能別コンポーネントは /components/[feature] に配置
- 複数のコンポーネントで共有されるフックは /hooks ディレクトリに配置
- ユーティリティ関数は /lib ディレクトリに配置
- ドメインモデルは /domain ディレクトリに配置
- API は /api ディレクトリに配置（Hono）
- Drizzle スキーマは /db/schema ディレクトリに配置
- 型定義は /types ディレクトリに配置

### 2. コンポーネントの実装

- 関数コンポーネントのみを使用
- Hooks を活用した状態管理
- Props は型定義を必ず指定し、required/default を明示
- Server Components と Client Components の区別を明確にする
  - Client Components には 'use client' ディレクティブを先頭に配置
  - データ取得は Server Components で行う
  - インタラクティブな UI は Client Components で実装

### 3. UI/UXデザイン

- shadcn/ui のコンポーネントを優先的に使用し、一貫したデザインを維持
- Tailwind CSS を使用したカスタマイズ
- レスポンシブデザインを考慮したクラス設定
- アクセシビリティを考慮した aria 属性の付与
- トランジションやアニメーションは適度に活用

### 4. 国際化対応

- next-intl を使用したテキストの国際化
- 日付や数値のフォーマットは各言語に対応
- 言語切り替えに対応したレイアウト設計

### 5. コンポーネントの種類別規約

#### ボタン系
- shadcn/ui の Button コンポーネントをベースに実装
- クリックハンドラは handle[Action] の形式で命名
- disabled 状態の視覚的フィードバックを実装
- loading 状態の表現を統一
- バリアントの種類（primary, secondary, destructive 等）を適切に使用

#### モーダル系
- shadcn/ui の Dialog コンポーネントをベースに実装
- isOpen と onOpenChange プロパティで表示制御
- フォーカストラップの実装
- キーボード操作（Escape）対応

#### テーブル系
- shadcn/ui の Table コンポーネントをベースに実装
- ページネーションの実装
- ソート・フィルタ機能の統一的な実装
- 空の状態の表示を統一
- ローディング状態の表示

### 6. エラーハンドリング

- try-catch による適切なエラーハンドリング
- ユーザーフレンドリーなエラーメッセージの表示
- エラー状態のログ記録
- Next.js の Error Boundary を活用したエラー表示

### 7. テスト容易性

- テスト可能なコンポーネント設計
- 副作用の分離
- データ取得と表示ロジックの分離

## Drizzle スキーマ設計の規約

### 1. スキーマ定義

- 各テーブルは別ファイルで定義
- スキーマファイルは /db/schema ディレクトリに配置
- TypeScript の型は自動生成を活用

```typescript
// db/schema/users.ts
import { sqliteTable, text, integer } from 'drizzle-orm/sqlite-core';
import { createId } from '@paralleldrive/cuid2';

export const users = sqliteTable('users', {
  id: text('id').primaryKey().$defaultFn(() => createId()),
  name: text('name').notNull(),
  email: text('email').notNull().unique(),
  createdAt: integer('created_at', { mode: 'timestamp' })
    .$defaultFn(() => new Date()),
  updatedAt: integer('updated_at', { mode: 'timestamp' })
    .$defaultFn(() => new Date()),
});

export type User = typeof users.$inferSelect;
export type NewUser = typeof users.$inferInsert;
```

### 2. リレーション定義

- 外部キー制約を明示的に定義
- リレーションシップは relations オブジェクトで定義

```typescript
// db/schema/posts.ts
import { sqliteTable, text, integer } from 'drizzle-orm/sqlite-core';
import { createId } from '@paralleldrive/cuid2';
import { users } from './users';
import { relations } from 'drizzle-orm';

export const posts = sqliteTable('posts', {
  id: text('id').primaryKey().$defaultFn(() => createId()),
  title: text('title').notNull(),
  content: text('content').notNull(),
  userId: text('user_id').notNull().references(() => users.id),
  createdAt: integer('created_at', { mode: 'timestamp' })
    .$defaultFn(() => new Date()),
  updatedAt: integer('updated_at', { mode: 'timestamp' })
    .$defaultFn(() => new Date()),
});

export const postsRelations = relations(posts, ({ one }) => ({
  user: one(users, {
    fields: [posts.userId],
    references: [users.id],
  }),
}));
```

### 3. マイグレーション

- マイグレーションは Drizzle Kit を使用
- マイグレーションファイルは /db/migrations ディレクトリに配置

```bash
# マイグレーションの生成
bun run drizzle-kit generate

# マイグレーションの実行
bun run drizzle-kit migrate
```

## リポジトリ実装の規約

### 1. ファイル構成

- リポジトリインターフェースは /domain/repositories ディレクトリに配置
- リポジトリ実装は /infrastructure/repositories ディレクトリに配置

```typescript
// domain/repositories/userRepository.ts
import { User } from '@/db/schema/users';

export interface UserRepository {
  findById(id: string): Promise<User | null>;
  findByEmail(email: string): Promise<User | null>;
  findAll(): Promise<User[]>;
  create(user: Omit<User, 'id' | 'createdAt' | 'updatedAt'>): Promise<User>;
  update(id: string, data: Partial<User>): Promise<User | null>;
  delete(id: string): Promise<boolean>;
}
```

```typescript
// infrastructure/repositories/d1UserRepository.ts
import { eq } from 'drizzle-orm';
import { db } from '@/db';
import { users } from '@/db/schema/users';
import { UserRepository } from '@/domain/repositories/userRepository';
import type { User, NewUser } from '@/db/schema/users';

export class D1UserRepository implements UserRepository {
  async findById(id: string): Promise<User | null> {
    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);
    return result[0] || null;
  }
  
  async findByEmail(email: string): Promise<User | null> {
    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);
    return result[0] || null;
  }
  
  async findAll(): Promise<User[]> {
    return db.select().from(users);
  }
  
  async create(userData: Omit<User, 'id' | 'createdAt' | 'updatedAt'>): Promise<User> {
    const result = await db.insert(users).values(userData).returning();
    return result[0];
  }
  
  async update(id: string, data: Partial<User>): Promise<User | null> {
    const result = await db.update(users)
      .set({ ...data, updatedAt: new Date() })
      .where(eq(users.id, id))
      .returning();
    return result[0] || null;
  }
  
  async delete(id: string): Promise<boolean> {
    const result = await db.delete(users).where(eq(users.id, id));
    return !!result;
  }
}
```

### 2. クエリの実装

- Drizzle の型安全なクエリビルダーを使用
- パフォーマンスを考慮した適切なインデックス設計
- トランザクションを使用した一貫性の確保

## Hono API 実装の規約

### 1. ファイル構成

- API ルートは /api ディレクトリに配置
- ルーティングはリソース単位でグループ化

```typescript
// api/index.ts
import { Hono } from 'hono';
import { usersRoutes } from './users';
import { postsRoutes } from './posts';

const api = new Hono();

api.route('/users', usersRoutes);
api.route('/posts', postsRoutes);

export { api };
```

```typescript
// api/users.ts
import { Hono } from 'hono';
import { zValidator } from '@hono/zod-validator';
import { z } from 'zod';
import { getUserUseCase } from '@/application/useCases/getUserUseCase';

const usersRoutes = new Hono();

const userSchema = z.object({
  name: z.string().min(1),
  email: z.string().email(),
});

usersRoutes.get('/:id', async (c) => {
  const id = c.req.param('id');
  
  try {
    const user = await getUserUseCase.execute(id);
    
    if (!user) {
      return c.json({ error: 'User not found' }, 404);
    }
    
    return c.json({ data: user });
  } catch (error) {
    return c.json({ error: 'Internal server error' }, 500);
  }
});

usersRoutes.post('/', zValidator('json', userSchema), async (c) => {
  const data = c.req.valid('json');
  
  try {
    const user = await createUserUseCase.execute(data);
    return c.json({ data: user }, 201);
  } catch (error) {
    if (error instanceof ValidationError) {
      return c.json({ error: error.message }, 400);
    }
    return c.json({ error: 'Internal server error' }, 500);
  }
});

export { usersRoutes };
```

### 2. リクエスト処理

- Zod を使用した入力バリデーション
- ミドルウェアを活用した共通処理（認証、ロギングなど）
- エラーハンドリングの統一

### 3. レスポンス形式

```typescript
// 成功時
return c.json({ data: result }, 200);

// エラー時
return c.json({ error: { message: "エラーメッセージ" } }, errorCode);
```

## データ取得とフェッチ

### 1. TanStack Query の活用

- クライアントサイドのデータ取得には TanStack Query を使用
- キャッシュとデータの再取得戦略を適切に設定
- エラーハンドリングと読み込み状態を一貫して管理

```typescript
// hooks/useUsers.ts
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { userApi } from '@/lib/api/userApi';
import type { User } from '@/db/schema/users';

export function useUsers() {
  const queryClient = useQueryClient();
  
  const usersQuery = useQuery<User[]>({
    queryKey: ['users'],
    queryFn: userApi.getAll,
  });
  
  const createUserMutation = useMutation({
    mutationFn: userApi.create,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['users'] });
    },
  });
  
  return {
    users: usersQuery.data || [],
    isLoading: usersQuery.isLoading,
    error: usersQuery.error,
    createUser: createUserMutation.mutate,
    isCreating: createUserMutation.isPending,
  };
}
```

### 2. API クライアント

- 型安全な API クライアントを実装
- Fetch API をベースにしたラッパー
- エラーハンドリングとレスポンス処理の一貫性を確保

```typescript
// lib/api/apiClient.ts
import { z } from 'zod';

const apiResponseSchema = z.object({
  data: z.unknown().optional(),
  error: z.object({
    message: z.string(),
  }).optional(),
});

type ApiResponse<T> = {
  data?: T;
  error?: { message: string };
};

export async function apiClient<T>(
  url: string,
  options?: RequestInit
): Promise<ApiResponse<T>> {
  try {
    const response = await fetch(url, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    });
    
    const jsonData = await response.json();
    const parsedResponse = apiResponseSchema.parse(jsonData);
    
    if (!response.ok) {
      return { error: { message: parsedResponse.error?.message || 'Unknown error' } };
    }
    
    return { data: parsedResponse.data as T };
  } catch (error) {
    if (error instanceof Error) {
      return { error: { message: error.message } };
    }
    return { error: { message: 'Unknown error occurred' } };
  }
}
```

## テスト駆動開発の規約

### 1. テストの種類と配置

- 単体テスト: /tests/unit ディレクトリに配置
- 統合テスト: /tests/integration ディレクトリに配置
- E2Eテスト: /tests/e2e ディレクトリに配置

### 2. テストファイルの命名

- 単体テスト: `[ClassName].test.ts`
- 統合テスト: `[Feature].integration.test.ts`
- E2Eテスト: `[Scenario].e2e.test.ts`

### 3. テスト駆動開発のワークフロー

1. 失敗するテストを書く
2. テストが通るようにコードを書く
3. コードをリファクタリングする
4. 繰り返す

### 4. テストカバレッジ

- 全てのドメインロジックは100%のカバレッジを目指す
- ユーティリティ関数は重要度に応じてカバレッジを調整
- UI コンポーネントは基本的な動作を確認するテストを実装

## ユニットテスト実装の規約

### 1. コンポーネントテスト

#### ファイル構成
- テストファイルの命名規則: `[ComponentName].test.tsx`
- テストファイルの配置: `/tests/unit/components/`
- テストケースは機能単位でグループ化

#### テストケース設計
- コンポーネントのレンダリング状態の検証
- Props の動作確認
- ユーザーインタラクションのテスト
- 非同期操作の検証
- エラー状態のハンドリング

```typescript
// tests/unit/components/Button.test.tsx
import { test, expect, describe } from 'bun:test';
import { render, fireEvent } from '@testing-library/react';
import { Button } from '@/components/ui/Button';

describe('Button', () => {
  test('renders with default props', () => {
    const { getByRole } = render(<Button>Click me</Button>);
    const button = getByRole('button');
    
    expect(button).toBeDefined();
    expect(button.textContent).toBe('Click me');
  });
  
  test('calls onClick when clicked', () => {
    const handleClick = jest.fn();
    const { getByRole } = render(
      <Button onClick={handleClick}>Click me</Button>
    );
    
    fireEvent.click(getByRole('button'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });
  
  test('is disabled when disabled prop is true', () => {
    const { getByRole } = render(<Button disabled>Click me</Button>);
    const button = getByRole('button');
    
    expect(button).toHaveAttribute('disabled');
  });
});
```

### 2. ドメインロジックテスト

#### ファイル構成
- テストファイルの命名規則: `[DomainClass].test.ts`
- テストファイルの配置: `/tests/unit/domain/`
- ビジネスルールごとにグループ化

```typescript
// tests/unit/domain/User.test.ts
import { test, expect, describe } from 'bun:test';
import { User } from '@/domain/User';

describe('User Domain Entity', () => {
  test('creates valid user', () => {
    const user = new User({
      name: 'John Doe',
      email: 'john@example.com',
    });
    
    expect(user.name).toBe('John Doe');
    expect(user.email).toBe('john@example.com');
  });
  
  test('validates email format', () => {
    expect(() => {
      new User({
        name: 'John Doe',
        email: 'invalid-email',
      });
    }).toThrow('Invalid email format');
  });
});
```

### 3. リポジトリテスト

#### ファイル構成
- テストファイルの命名規則: `[RepositoryName].test.ts`
- テストファイルの配置: `/tests/unit/repositories/`
- CRUD 操作ごとにグループ化

```typescript
// tests/unit/repositories/UserRepository.test.ts
import { test, expect, describe, beforeEach, afterEach } from 'bun:test';
import { D1UserRepository } from '@/infrastructure/repositories/D1UserRepository';
import { mockDb } from '@/tests/mocks/db';

describe('D1UserRepository', () => {
  let repository: D1UserRepository;
  
  beforeEach(() => {
    repository = new D1UserRepository(mockDb);
  });
  
  afterEach(() => {
    mockDb.reset();
  });
  
  test('findById returns user when exists', async () => {
    const userId = '123';
    mockDb.prepare('users', [
      { id: userId, name: 'Test User', email: 'test@example.com' }
    ]);
    
    const user = await repository.findById(userId);
    
    expect(user).not.toBeNull();
    expect(user?.id).toBe(userId);
    expect(user?.name).toBe('Test User');
  });
  
  test('findById returns null when user does not exist', async () => {
    const user = await repository.findById('non-existent');
    expect(user).toBeNull();
  });
});
```

### 4. API テスト

#### ファイル構成
- テストファイルの命名規則: `[Route].test.ts`
- テストファイルの配置: `/tests/unit/api/`
- エンドポイントごとにグループ化

```typescript
// tests/unit/api/userRoutes.test.ts
import { test, expect, describe } from 'bun:test';
import { usersRoutes } from '@/api/users';
import { Hono } from 'hono';

describe('User API Routes', () => {
  test('GET /users/:id returns 200 with valid user', async () => {
    // セットアップ...
    
    const app = new Hono().route('/users', usersRoutes);
    const res = await app.request('/users/123');
    
    expect(res.status).toBe(200);
    
    const body = await res.json();
    expect(body.data.id).toBe('123');
  });
  
  test('GET /users/:id returns 404 when user not found', async () => {
    // セットアップ...
    
    const app = new Hono().route('/users', usersRoutes);
    const res = await app.request('/users/nonexistent');
    
    expect(res.status).toBe(404);
  });
});
```

## コード変更後の確認

1. ビルドの確認
```bash
bun run build
```

2. 変更したファイルのユニットテスト実行
```bash
# 特定のテストファイルを実行
bun test tests/unit/components/Button.test.tsx

# 特定のディレクトリ内の全テストを実行
bun test tests/unit/components/
```

3. リントとフォーマットの確認
```bash
bun run biome:check
bun run biome:format
```

# コミットメッセージ規約

### 1. 基本構造

```
<type>(<scope>): <subject>

<body>

<footer>
```

### 2. 各要素の説明

#### Type
- feat: 新機能
- fix: バグ修正
- docs: ドキュメントのみの変更
- style: コードの意味に影響を与えない変更（空白、フォーマット、セミコロンの追加など）
- refactor: バグ修正や機能追加のないコードの変更
- test: テストの追加・修正
- chore: ビルドプロセスやドキュメント生成などの補助ツールやライブラリの変更

#### Scope
- 変更の影響範囲を示す
- 複数のスコープがある場合はカンマで区切る
- 全体的な変更の場合は省略可能

#### Subject
- 変更内容を簡潔に要約

#### Body
- 変更の詳細な説明
- 改行して複数行で記述可能
- なぜその変更が必要だったのかの背景も含める
- 72文字で改行

#### Footer
- 関連する Issue や PR 番号を記載
- BREAKING CHANGES があれば明記

### 3. コミットメッセージの例

```
feat(auth): ユーザー認証機能を追加

- JWT認証の実装
- ログイン/ログアウトフローの追加
- 認証状態の管理を実装

Closes #123
```

### 4. 注意事項

- 1つのコミットでは1つの論理的な変更のみを含める
- 複数の変更がある場合は複数のコミットに分割する
- コミットメッセージは日本語で記述可能
- 変更の追跡可能性のために関連するIssue番号を含める

## プルリクエスト作成規約

### 1. 基本ルール

- ベースブランチは main または development に固定
- タイトルとボディは日本語で記述

### 2. タイトル・ボディの作成

#### タイトル
- ブランチに含まれるコミット内容を簡潔に要約
- フォーマット: `[コミットタイプ] 変更内容の要約`
- 例：`[feat] ユーザー認証機能の追加`

#### ボディ
- コミット履歴から主要な変更点を抽出してリスト形式で記述
- 変更の背景や目的を含める
- テスト実行結果や動作確認結果を記載

### 3. レビュー依頼時の注意点

- 特に確認してほしい点を明記
- コードの複雑な部分には補足説明を追加
- PR のサイズを小さく保ち、レビューしやすくする
- スクリーンショットや動画があると理解しやすい

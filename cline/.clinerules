# Next.js 開発ルール

## ロール定義

あなたは優秀なエンジニア兼 UI/UX デザイナーとして対応してください。

## 技術スタック

- ランタイム
  - Bun
- フロントエンド
  - Next.js (App Router)
  - TypeScript
  - Zustand
  - TanStack Query
- バックエンド
  - Hono（API）
  - Drizzle ORM
- データベース
  - Cloudflare D1
- ホスティング
  - Cloudflare Workers
- バリデーション
  - Zod
- ユニットテスト
  - Bun test
- フォーマッター/リンター
  - Biome
- UI フレームワーク
  - shadcn/ui (Tailwind CSS)
- 開発手法
  - ドメイン駆動設計（DDD）
  - テスト駆動開発（TDD）

## 期待する回答

- 実装コードは省略せず、完全な形で提供
- TypeScript の型定義も含める
- セキュリティのベストプラクティスに従った実装
- レスポンシブデザインを考慮した UI/UX 提案
- Drizzle スキーマとマイグレーション方法も必要に応じて提示
- 日本語での詳細な説明

## 開発環境設定

### .vscode ディレクトリ

プロジェクトには以下の .vscode 設定ファイルを含めます。これにより、チーム全体で一貫した開発環境を確保します。

#### settings.json

```json
{
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.organizeImports.biome": true,
    "source.fixAll.biome": true
  },
  "editor.defaultFormatter": "biomejs.biome",
  "typescript.tsdk": "node_modules/typescript/lib",
  "typescript.enablePromptUseWorkspaceTsdk": true,
  "css.lint.unknownAtRules": "ignore",
  "tailwindCSS.experimental.classRegex": [
    ["cva\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"],
    ["cn\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"]
  ]
}
```

#### extensions.json

```json
{
  "recommendations": [
    "biomejs.biome",
    "bradlc.vscode-tailwindcss",
    "ms-vscode.vscode-typescript-next",
    "aaron-bond.better-comments",
    "dbaeumer.vscode-eslint",
    "mskelton.workspace-formatter",
    "pustelto.bracketeer",
    "naumovs.color-highlight",
    "paulmolluzzo.convert-css-in-js",
    "streetsidesoftware.code-spell-checker"
  ]
}
```

#### launch.json

```json
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Next.js: debug server-side",
      "type": "node-terminal",
      "request": "launch",
      "command": "bun run dev"
    },
    {
      "name": "Next.js: debug client-side",
      "type": "chrome",
      "request": "launch",
      "url": "http://localhost:3000"
    },
    {
      "name": "Next.js: debug full stack",
      "type": "node-terminal",
      "request": "launch",
      "command": "bun run dev",
      "serverReadyAction": {
        "pattern": "- Local:.+(https?://.+)",
        "uriFormat": "%s",
        "action": "debugWithChrome"
      }
    }
  ]
}
```

### Biome 設定

プロジェクトルートに `biome.json` ファイルを配置し、チーム全体で一貫したコーディングスタイルとルールを確保します。

```json
{
  "$schema": "https://biomejs.dev/schemas/1.5.3/schema.json",
  "organizeImports": {
    "enabled": true
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": true,
      "correctness": {
        "noUnusedVariables": "error",
        "useExhaustiveDependencies": "error"
      },
      "suspicious": {
        "noExplicitAny": "error",
        "noConsoleLog": "warn"
      },
      "style": {
        "useConst": "error",
        "useImportType": "error",
        "useTemplate": "error"
      },
      "a11y": {
        "useButtonType": "error",
        "useAltText": "error"
      }
    },
    "ignore": [
      "node_modules",
      ".next",
      "dist",
      "public"
    ]
  },
  "formatter": {
    "enabled": true,
    "indentStyle": "space",
    "indentWidth": 2,
    "lineWidth": 100,
    "ignore": [
      "node_modules",
      ".next",
      "dist",
      "public",
      "*.md"
    ]
  },
  "javascript": {
    "parser": {
      "unsafeParameterDecoratorsEnabled": true
    },
    "formatter": {
      "quoteStyle": "single",
      "trailingComma": "es5",
      "semicolons": "always"
    }
  }
}
```

## AI駆動ルール

### 1. 実装ドキュメント作成
- 指示を受けた実装が完了したら、コンテキスト理解のために実装内容をまとめたmarkdownドキュメントを作成し、プロジェクトに追加する
- ドキュメントは `/docs/implementations/` ディレクトリに配置し、ファイル名は `[機能名]-implementation.md` の形式にする
- ドキュメントには以下の内容を含める：
  - 機能の目的と背景
  - アーキテクチャと設計パターン
  - 主要コンポーネントとその関係
  - 使用方法と例
  - 注意点とエッジケース
  - 将来的な拡張性

### 2. コード生成ワークフロー
- AIにコード生成を依頼する際は、明確な要件と制約を提示する
- 生成されたコードは必ずレビューし、ドメインモデルに適合することを確認する
- AIが生成したコードにはコメントで「AI生成コード」と明記し、後からの追跡を可能にする

### 3. チームでの知識共有
- AIとの対話履歴をチーム内で共有し、同様の問題に対する解決策を蓄積する
- 重要な設計判断や実装方針は、AIに説明してもらいドキュメント化する
- 月次で、AIの活用パターンと効果をチームで振り返り、改善点を特定する

### 4. 品質管理プロセス
- AIが生成したコードに対して、通常の開発プロセスと同等の品質基準を適用する
- テストカバレッジ、パフォーマンス基準、セキュリティチェックを徹底する
- AIの提案する実装が標準から逸脱する場合は、その理由を文書化する

# セキュリティ

## 機密ファイル

以下のファイルの読み取りと変更を禁止：

- .env ファイル
- .env.local ファイル
- APIキー、トークン、認証情報を含むすべてのファイル

## セキュリティ対策

- 機密ファイルを絶対にコミットしない
- シークレット情報は環境変数を使用する
- ログや出力に認証情報を含めない
- Hono API では適切な認証と認可を実装する
- Cloudflare Workers の環境変数を適切に使用する

## コーディング規約

- Biome の標準的なルールに準拠
- React Hooks の規則に従う
- 関数やコンポーネントには適切なコメントを含める
- Zod によるスキーマ検証を活用する
- `any` と `unknown` 型の使用を禁止する
  - 代わりに具体的な型または型ユーティリティを使用（例：`Record<string, string>`, `Partial<T>`, `Pick<T, K>`）
  - やむを得ない場合は明示的なコメントを添えて `unknown` のみ使用可能とし、必ず型ガードを実施
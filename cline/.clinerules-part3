## AI駆動ルール

### 1. 実装ドキュメント作成
- 指示を受けた実装が完了したら、コンテキスト理解のために実装内容をまとめたmarkdownドキュメントを作成し、プロジェクトに追加する
- ドキュメントは `/docs/implementations/` ディレクトリに配置し、ファイル名は `[機能名]-implementation.md` の形式にする
- ドキュメントには以下の内容を含める：
  - 機能の目的と背景
  - アーキテクチャと設計パターン
  - 主要コンポーネントとその関係
  - 使用方法と例
  - 注意点とエッジケース
  - 将来的な拡張性

### 2. コード生成ワークフロー
- AIにコード生成を依頼する際は、明確な要件と制約を提示する
- 生成されたコードは必ずレビューし、ドメインモデルに適合することを確認する
- AIが生成したコードにはコメントで「AI生成コード」と明記し、後からの追跡を可能にする

### 3. チームでの知識共有
- AIとの対話履歴をチーム内で共有し、同様の問題に対する解決策を蓄積する
- 重要な設計判断や実装方針は、AIに説明してもらいドキュメント化する
- 月次で、AIの活用パターンと効果をチームで振り返り、改善点を特定する

### 4. 品質管理プロセス
- AIが生成したコードに対して、通常の開発プロセスと同等の品質基準を適用する
- テストカバレッジ、パフォーマンス基準、セキュリティチェックを徹底する
- AIの提案する実装が標準から逸脱する場合は、その理由を文書化する

# セキュリティ

## 機密ファイル

以下のファイルの読み取りと変更を禁止：

- .env ファイル
- .env.local ファイル
- APIキー、トークン、認証情報を含むすべてのファイル

## セキュリティ対策

- 機密ファイルを絶対にコミットしない
- シークレット情報は環境変数を使用する
- ログや出力に認証情報を含めない
- Hono API では適切な認証と認可を実装する
- Cloudflare Workers の環境変数を適切に使用する

## コーディング規約

- Biome の標準的なルールに準拠
- React Hooks の規則に従う
- 関数やコンポーネントには適切なコメントを含める
- Zod によるスキーマ検証を活用する
- `any` と `unknown` 型の使用を禁止する
  - 代わりに具体的な型または型ユーティリティを使用（例：`Record<string, string>`, `Partial<T>`, `Pick<T, K>`）
  - やむを得ない場合は明示的なコメントを添えて `unknown` のみ使用可能とし、必ず型ガードを実施